diff -r 55c5f10e7e5d mobile/android/base/AndroidManifest.xml.in
--- a/mobile/android/base/AndroidManifest.xml.in	Wed Aug 05 10:37:50 2015 -0400
+++ b/mobile/android/base/AndroidManifest.xml.in	Sat Aug 08 15:30:14 2015 -0300
@@ -16,7 +16,6 @@
               android:targetSdkVersion="@ANDROID_TARGET_SDK@"/>
 
 #include ../services/manifests/FxAccountAndroidManifest_permissions.xml.in
-#include ../services/manifests/HealthReportAndroidManifest_permissions.xml.in
 #include ../services/manifests/SyncAndroidManifest_permissions.xml.in
 
 #ifdef MOZ_ANDROID_SEARCH_ACTIVITY
@@ -379,7 +378,6 @@
         </service>
 
 #include ../services/manifests/FxAccountAndroidManifest_activities.xml.in
-#include ../services/manifests/HealthReportAndroidManifest_activities.xml.in
 #include ../services/manifests/SyncAndroidManifest_activities.xml.in
 #ifdef MOZ_ANDROID_SEARCH_ACTIVITY
 #include ../search/manifests/SearchAndroidManifest_activities.xml.in
@@ -484,7 +482,6 @@
 
 
 #include ../services/manifests/FxAccountAndroidManifest_services.xml.in
-#include ../services/manifests/HealthReportAndroidManifest_services.xml.in
 #include ../services/manifests/SyncAndroidManifest_services.xml.in
 #ifdef MOZ_ANDROID_SEARCH_ACTIVITY
 #include ../search/manifests/SearchAndroidManifest_services.xml.in
diff -r 55c5f10e7e5d mobile/android/base/BrowserApp.java
--- a/mobile/android/base/BrowserApp.java	Wed Aug 05 10:37:50 2015 -0400
+++ b/mobile/android/base/BrowserApp.java	Sat Aug 08 15:30:14 2015 -0300
@@ -28,10 +28,6 @@
 import org.mozilla.gecko.gfx.ImmutableViewportMetrics;
 import org.mozilla.gecko.gfx.LayerMarginsAnimator;
 import org.mozilla.gecko.gfx.LayerView;
-import org.mozilla.gecko.health.BrowserHealthRecorder;
-import org.mozilla.gecko.health.BrowserHealthReporter;
-import org.mozilla.gecko.health.HealthRecorder;
-import org.mozilla.gecko.health.SessionInformation;
 import org.mozilla.gecko.home.BrowserSearch;
 import org.mozilla.gecko.home.HomeBanner;
 import org.mozilla.gecko.home.HomePager;
@@ -245,8 +241,6 @@
 
     private OrderedBroadcastHelper mOrderedBroadcastHelper;
 
-    private BrowserHealthReporter mBrowserHealthReporter;
-
     private ReadingListHelper mReadingListHelper;
 
     // The tab to be selected on editing mode exit.
@@ -798,7 +792,6 @@
         JavaAddonManager.getInstance().init(appContext);
         mSharedPreferencesHelper = new SharedPreferencesHelper(appContext);
         mOrderedBroadcastHelper = new OrderedBroadcastHelper(appContext);
-        mBrowserHealthReporter = new BrowserHealthReporter();
         mReadingListHelper = new ReadingListHelper(appContext, getProfile());
 
         if (AppConstants.MOZ_ANDROID_BEAM) {
@@ -1314,11 +1307,6 @@
             mOrderedBroadcastHelper = null;
         }
 
-        if (mBrowserHealthReporter != null) {
-            mBrowserHealthReporter.uninit();
-            mBrowserHealthReporter = null;
-        }
-
         if (mReadingListHelper != null) {
             mReadingListHelper.uninit();
             mReadingListHelper = null;
@@ -2316,16 +2304,7 @@
      *        {@link BrowserHealthRecorder#SEARCH_LOCATIONS}.
      */
     private static void recordSearch(SearchEngine engine, String where) {
-        try {
-            String identifier = (engine == null) ? "other" : engine.getEngineIdentifier();
-            JSONObject message = new JSONObject();
-            message.put("type", BrowserHealthRecorder.EVENT_SEARCH);
-            message.put("location", where);
-            message.put("identifier", identifier);
-            EventDispatcher.getInstance().dispatchEvent(message, null);
-        } catch (Exception e) {
-            Log.e(LOGTAG, "Error recording search.", e);
-        }
+        return;
     }
 
     /**
@@ -3749,22 +3728,6 @@
         }
     }
 
-    @Override
-    protected HealthRecorder createHealthRecorder(final Context context,
-                                                  final String profilePath,
-                                                  final EventDispatcher dispatcher,
-                                                  final String osLocale,
-                                                  final String appLocale,
-                                                  final SessionInformation previousSession) {
-        return new BrowserHealthRecorder(context,
-                                         GeckoSharedPrefs.forApp(context),
-                                         profilePath,
-                                         dispatcher,
-                                         osLocale,
-                                         appLocale,
-                                         previousSession);
-    }
-
     public static interface Refreshable {
         public void refresh();
     }
diff -r 55c5f10e7e5d mobile/android/base/GeckoApp.java
--- a/mobile/android/base/GeckoApp.java	Wed Aug 05 10:37:50 2015 -0400
+++ b/mobile/android/base/GeckoApp.java	Sat Aug 08 15:30:14 2015 -0300
@@ -32,9 +32,6 @@
 import org.mozilla.gecko.gfx.Layer;
 import org.mozilla.gecko.gfx.LayerView;
 import org.mozilla.gecko.gfx.PluginLayer;
-import org.mozilla.gecko.health.HealthRecorder;
-import org.mozilla.gecko.health.SessionInformation;
-import org.mozilla.gecko.health.StubbedHealthRecorder;
 import org.mozilla.gecko.menu.GeckoMenu;
 import org.mozilla.gecko.menu.GeckoMenuInflater;
 import org.mozilla.gecko.menu.MenuPanel;
@@ -193,7 +190,6 @@
 
     private String mPrivateBrowsingSession;
 
-    private volatile HealthRecorder mHealthRecorder;
     private volatile Locale mLastLocale;
 
     private EventListener mWebappEventListener;
@@ -664,15 +660,6 @@
                 mGeckoReadyStartupTimer.stop();
                 geckoConnected();
 
-                // This method is already running on the background thread, so we
-                // know that mHealthRecorder will exist. That doesn't stop us being
-                // paranoid.
-                // This method is cheap, so don't spawn a new runnable.
-                final HealthRecorder rec = mHealthRecorder;
-                if (rec != null) {
-                  rec.recordGeckoStartupTime(mGeckoReadyStartupTimer.getElapsed());
-                }
-
             } else if (event.equals("Gecko:Exited")) {
                 // Gecko thread exited first; let GeckoApp die too.
                 doShutdown();
@@ -1301,11 +1288,6 @@
                 final LocaleManager localeManager = BrowserLocaleManager.getInstance();
                 localeManager.initialize(getApplicationContext());
 
-                SessionInformation previousSession = SessionInformation.fromSharedPrefs(prefs);
-                if (previousSession.wasKilled()) {
-                    Telemetry.addToHistogram("FENNEC_WAS_KILLED", 1);
-                }
-
                 SharedPreferences.Editor editor = prefs.edit();
                 editor.putBoolean(GeckoApp.PREFS_OOM_EXCEPTION, false);
 
@@ -1333,13 +1315,6 @@
                     appLocaleString = osLocaleString;
                 }
 
-                mHealthRecorder = GeckoApp.this.createHealthRecorder(GeckoApp.this,
-                                                                     profilePath,
-                                                                     dispatcher,
-                                                                     osLocaleString,
-                                                                     appLocaleString,
-                                                                     previousSession);
-
                 final String uiLocale = appLocaleString;
                 ThreadUtils.postToUiThread(new Runnable() {
                     @Override
@@ -1553,31 +1528,6 @@
                                            (TextSelectionHandle) findViewById(R.id.caret_handle),
                                            (TextSelectionHandle) findViewById(R.id.focus_handle));
 
-        // Trigger the completion of the telemetry timer that wraps activity startup,
-        // then grab the duration to give to FHR.
-        mJavaUiStartupTimer.stop();
-        final long javaDuration = mJavaUiStartupTimer.getElapsed();
-
-        ThreadUtils.getBackgroundHandler().postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                final HealthRecorder rec = mHealthRecorder;
-                if (rec != null) {
-                    rec.recordJavaStartupTime(javaDuration);
-                }
-
-                UpdateServiceHelper.registerForUpdates(GeckoApp.this);
-
-                // Kick off our background services. We do this by invoking the broadcast
-                // receiver, which uses the system alarm infrastructure to perform tasks at
-                // intervals.
-                GeckoPreferences.broadcastHealthReportUploadPref(GeckoApp.this);
-                if (!GeckoThread.checkLaunchState(GeckoThread.LaunchState.Launched)) {
-                    return;
-                }
-            }
-        }, 50);
-
         if (mIsRestoringActivity) {
             Tab selectedTab = Tabs.getInstance().getSelectedTab();
             if (selectedTab != null) {
@@ -1900,29 +1850,6 @@
         // track the duration of the session.
         final long now = System.currentTimeMillis();
         final long realTime = android.os.SystemClock.elapsedRealtime();
-
-        ThreadUtils.postToBackgroundThread(new Runnable() {
-            @Override
-            public void run() {
-                // Now construct the new session on HealthRecorder's behalf. We do this here
-                // so it can benefit from a single near-startup prefs commit.
-                SessionInformation currentSession = new SessionInformation(now, realTime);
-
-                SharedPreferences prefs = GeckoApp.this.getSharedPreferences();
-                SharedPreferences.Editor editor = prefs.edit();
-                editor.putBoolean(GeckoApp.PREFS_WAS_STOPPED, false);
-                currentSession.recordBegin(editor);
-                editor.apply();
-
-                final HealthRecorder rec = mHealthRecorder;
-                if (rec != null) {
-                    rec.setCurrentSession(currentSession);
-                    rec.processDelayed();
-                } else {
-                    Log.w(LOGTAG, "Can't record session: rec is null.");
-                }
-            }
-        });
     }
 
     @Override
@@ -1938,7 +1865,6 @@
     @Override
     public void onPause()
     {
-        final HealthRecorder rec = mHealthRecorder;
         final Context context = this;
 
         // In some way it's sad that Android will trigger StrictMode warnings
@@ -1950,9 +1876,6 @@
                 SharedPreferences prefs = GeckoApp.this.getSharedPreferences();
                 SharedPreferences.Editor editor = prefs.edit();
                 editor.putBoolean(GeckoApp.PREFS_WAS_STOPPED, true);
-                if (rec != null) {
-                    rec.recordSessionEnd("P", editor);
-                }
 
                 // If we haven't done it before, cleanup any old files in our old temp dir
                 if (prefs.getBoolean(GeckoApp.PREFS_CLEANUP_TEMP_FILES, true)) {
@@ -1963,11 +1886,6 @@
                 }
 
                 editor.apply();
-
-                // In theory, the first browser session will not run long enough that we need to
-                // prune during it and we'd rather run it when the browser is inactive so we wait
-                // until here to register the prune service.
-                GeckoPreferences.broadcastHealthReportPrune(context);
             }
         });
 
@@ -2055,18 +1973,6 @@
             }
         }
 
-        final HealthRecorder rec = mHealthRecorder;
-        mHealthRecorder = null;
-        if (rec != null && rec.isEnabled()) {
-            // Closing a BrowserHealthRecorder could incur a write.
-            ThreadUtils.postToBackgroundThread(new Runnable() {
-                @Override
-                public void run() {
-                    rec.close();
-                }
-            });
-        }
-
         Favicons.close();
 
         super.onDestroy();
@@ -2568,15 +2474,6 @@
         final boolean startNewSession = true;
         final boolean shouldRestart = false;
 
-        // If the HealthRecorder is not yet initialized (unlikely), the locale change won't
-        // trigger a session transition and subsequent events will be recorded in an environment
-        // with the wrong locale.
-        final HealthRecorder rec = mHealthRecorder;
-        if (rec != null) {
-            rec.onAppLocaleChanged(locale);
-            rec.onEnvironmentChanged(startNewSession, SESSION_END_LOCALE_CHANGED);
-        }
-
         if (!shouldRestart) {
             ThreadUtils.postToUiThread(new Runnable() {
                 @Override
@@ -2630,14 +2527,4 @@
             }
         });
     }
-
-    protected HealthRecorder createHealthRecorder(final Context context,
-                                                  final String profilePath,
-                                                  final EventDispatcher dispatcher,
-                                                  final String osLocale,
-                                                  final String appLocale,
-                                                  final SessionInformation previousSession) {
-        // GeckoApp does not need to record any health information - return a stub.
-        return new StubbedHealthRecorder();
-    }
 }
diff -r 55c5f10e7e5d mobile/android/base/android-services.mozbuild
--- a/mobile/android/base/android-services.mozbuild	Wed Aug 05 10:37:50 2015 -0400
+++ b/mobile/android/base/android-services.mozbuild	Sat Aug 08 15:30:14 2015 -0300
@@ -784,7 +784,6 @@
     'background/common/log/writers/ThreadLocalTagLogWriter.java',
     'background/common/PrefsBranch.java',
     'background/common/telemetry/TelemetryWrapper.java',
-    'background/datareporting/TelemetryRecorder.java',
     'background/db/CursorDumper.java',
     'background/db/Tab.java',
     'background/fxa/FxAccount10AuthDelegate.java',
@@ -806,30 +805,6 @@
     'background/fxa/profile/FxAccountProfileClient10.java',
     'background/fxa/QuickPasswordStretcher.java',
     'background/fxa/SkewHandler.java',
-    'background/healthreport/AndroidConfigurationProvider.java',
-    'background/healthreport/Environment.java',
-    'background/healthreport/EnvironmentBuilder.java',
-    'background/healthreport/EnvironmentV1.java',
-    'background/healthreport/EnvironmentV2.java',
-    'background/healthreport/HealthReportBroadcastReceiver.java',
-    'background/healthreport/HealthReportBroadcastService.java',
-    'background/healthreport/HealthReportConstants.java',
-    'background/healthreport/HealthReportDatabases.java',
-    'background/healthreport/HealthReportDatabaseStorage.java',
-    'background/healthreport/HealthReportGenerator.java',
-    'background/healthreport/HealthReportProvider.java',
-    'background/healthreport/HealthReportStorage.java',
-    'background/healthreport/HealthReportUtils.java',
-    'background/healthreport/ProfileInformationCache.java',
-    'background/healthreport/prune/HealthReportPruneService.java',
-    'background/healthreport/prune/PrunePolicy.java',
-    'background/healthreport/prune/PrunePolicyDatabaseStorage.java',
-    'background/healthreport/prune/PrunePolicyStorage.java',
-    'background/healthreport/upload/AndroidSubmissionClient.java',
-    'background/healthreport/upload/HealthReportUploadService.java',
-    'background/healthreport/upload/ObsoleteDocumentTracker.java',
-    'background/healthreport/upload/SubmissionClient.java',
-    'background/healthreport/upload/SubmissionPolicy.java',
     'background/nativecode/NativeCrypto.java',
     'background/preferences/PreferenceFragment.java',
     'background/preferences/PreferenceManagerCompat.java',
diff -r 55c5f10e7e5d mobile/android/base/moz.build
--- a/mobile/android/base/moz.build	Wed Aug 05 10:37:50 2015 -0400
+++ b/mobile/android/base/moz.build	Sat Aug 08 15:30:14 2015 -0300
@@ -291,11 +291,6 @@
     'gfx/VirtualLayer.java',
     'GlobalHistory.java',
     'GuestSession.java',
-    'health/BrowserHealthRecorder.java',
-    'health/BrowserHealthReporter.java',
-    'health/HealthRecorder.java',
-    'health/SessionInformation.java',
-    'health/StubbedHealthRecorder.java',
     'home/BookmarkFolderView.java',
     'home/BookmarksListAdapter.java',
     'home/BookmarksListView.java',
diff -r 55c5f10e7e5d mobile/android/base/preferences/GeckoPreferences.java
--- a/mobile/android/base/preferences/GeckoPreferences.java	Wed Aug 05 10:37:50 2015 -0400
+++ b/mobile/android/base/preferences/GeckoPreferences.java	Sat Aug 08 15:30:14 2015 -0300
@@ -36,7 +36,6 @@
 import org.mozilla.gecko.TelemetryContract;
 import org.mozilla.gecko.TelemetryContract.Method;
 import org.mozilla.gecko.background.common.GlobalConstants;
-import org.mozilla.gecko.background.healthreport.HealthReportConstants;
 import org.mozilla.gecko.db.BrowserContract.SuggestedSites;
 import org.mozilla.gecko.updater.UpdateService;
 import org.mozilla.gecko.updater.UpdateServiceHelper;
@@ -889,31 +888,6 @@
 
     /**
      * Broadcast the provided value as the value of the
-     * <code>PREFS_HEALTHREPORT_UPLOAD_ENABLED</code> pref.
-     */
-    public static void broadcastHealthReportUploadPref(final Context context, final boolean value) {
-        broadcastPrefAction(context,
-                            HealthReportConstants.ACTION_HEALTHREPORT_UPLOAD_PREF,
-                            PREFS_HEALTHREPORT_UPLOAD_ENABLED,
-                            value);
-    }
-
-    /**
-     * Broadcast the current value of the
-     * <code>PREFS_HEALTHREPORT_UPLOAD_ENABLED</code> pref.
-     */
-    public static void broadcastHealthReportUploadPref(final Context context) {
-        final boolean value = getBooleanPref(context, PREFS_HEALTHREPORT_UPLOAD_ENABLED, true);
-        broadcastHealthReportUploadPref(context, value);
-    }
-
-    public static void broadcastHealthReportPrune(final Context context) {
-        final Intent intent = new Intent(HealthReportConstants.ACTION_HEALTHREPORT_PRUNE);
-        broadcastAction(context, intent);
-    }
-
-    /**
-     * Broadcast the provided value as the value of the
      * <code>PREFS_GEO_REPORTING</code> pref.
      */
     public static void broadcastStumblerPref(final Context context, final boolean value) {
@@ -1095,12 +1069,6 @@
             UpdateServiceHelper.setAutoDownloadPolicy(this, UpdateService.AutoDownloadPolicy.get((String) newValue));
         } else if (PREFS_UPDATER_URL.equals(prefName)) {
             UpdateServiceHelper.setUpdateUrl(this, (String) newValue);
-        } else if (PREFS_HEALTHREPORT_UPLOAD_ENABLED.equals(prefName)) {
-            // The healthreport pref only lives in Android, so we do not persist
-            // to Gecko, but we do broadcast intent to the health report
-            // background uploader service, which will start or stop the
-            // repeated background upload attempts.
-            broadcastHealthReportUploadPref(this, (Boolean) newValue);
         } else if (PREFS_GEO_REPORTING.equals(prefName)) {
             broadcastStumblerPref(this, (Boolean) newValue);
             // Translate boolean value to int for geo reporting pref.
diff -r 55c5f10e7e5d mobile/android/search/java/org/mozilla/search/SearchActivity.java
--- a/mobile/android/search/java/org/mozilla/search/SearchActivity.java	Wed Aug 05 10:37:50 2015 -0400
+++ b/mobile/android/search/java/org/mozilla/search/SearchActivity.java	Sat Aug 08 15:30:14 2015 -0300
@@ -11,7 +11,6 @@
 import org.mozilla.gecko.TelemetryContract;
 import org.mozilla.gecko.db.BrowserContract.SearchHistory;
 import org.mozilla.gecko.distribution.Distribution;
-import org.mozilla.gecko.health.BrowserHealthRecorder;
 import org.mozilla.search.autocomplete.SearchBar;
 import org.mozilla.search.autocomplete.SuggestionsFragment;
 import org.mozilla.search.providers.SearchEngine;
@@ -243,14 +242,6 @@
     public void onSearch(String query, SuggestionAnimation suggestionAnimation) {
         storeQuery(query);
 
-        try {
-            BrowserHealthRecorder.recordSearchDelayed("activity", engine.getIdentifier());
-        } catch (Exception e) {
-            // This should never happen: it'll only throw if the
-            // search location is wrong. But let's not tempt fate.
-            Log.w(LOGTAG, "Unable to record search.");
-        }
-
         startSearch(query);
 
         if (suggestionAnimation != null) {
