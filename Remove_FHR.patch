diff -r 0bcea7b72ff9 mobile/android/base/java/org/mozilla/gecko/GeckoApp.java
--- a/mobile/android/base/java/org/mozilla/gecko/GeckoApp.java	Mon Dec 19 21:26:30 2016 -0500
+++ b/mobile/android/base/java/org/mozilla/gecko/GeckoApp.java	Sat Dec 31 00:00:00 2016 -0000
@@ -12,9 +12,6 @@
 import org.mozilla.gecko.gfx.BitmapUtils;
 import org.mozilla.gecko.gfx.FullScreenState;
 import org.mozilla.gecko.gfx.LayerView;
-import org.mozilla.gecko.health.HealthRecorder;
-import org.mozilla.gecko.health.SessionInformation;
-import org.mozilla.gecko.health.StubbedHealthRecorder;
 import org.mozilla.gecko.home.HomeConfig.PanelType;
 import org.mozilla.gecko.icons.IconCallback;
 import org.mozilla.gecko.icons.IconResponse;
@@ -284,7 +281,6 @@
 
     private String mPrivateBrowsingSession;
 
-    private volatile HealthRecorder mHealthRecorder;
     private volatile Locale mLastLocale;
 
     private Intent mRestartIntent;
@@ -748,15 +744,6 @@
                 mGeckoReadyStartupTimer.stop();
                 geckoConnected();
 
-                // This method is already running on the background thread, so we
-                // know that mHealthRecorder will exist. That doesn't stop us being
-                // paranoid.
-                // This method is cheap, so don't spawn a new runnable.
-                final HealthRecorder rec = mHealthRecorder;
-                if (rec != null) {
-                  rec.recordGeckoStartupTime(mGeckoReadyStartupTimer.getElapsed());
-                }
-
                 GeckoApplication.get().onDelayedStartup();
 
             } else if (event.equals("Gecko:Exited")) {
@@ -1361,11 +1348,6 @@
                 final LocaleManager localeManager = BrowserLocaleManager.getInstance();
                 localeManager.initialize(getApplicationContext());
 
-                SessionInformation previousSession = SessionInformation.fromSharedPrefs(prefs);
-                if (previousSession.wasKilled()) {
-                    Telemetry.addToHistogram("FENNEC_WAS_KILLED", 1);
-                }
-
                 SharedPreferences.Editor editor = prefs.edit();
                 editor.putBoolean(GeckoAppShell.PREFS_OOM_EXCEPTION, false);
 
@@ -1393,13 +1375,6 @@
                     appLocaleString = osLocaleString;
                 }
 
-                mHealthRecorder = GeckoApp.this.createHealthRecorder(GeckoApp.this,
-                                                                     profilePath,
-                                                                     dispatcher,
-                                                                     osLocaleString,
-                                                                     appLocaleString,
-                                                                     previousSession);
-
                 final String uiLocale = appLocaleString;
                 ThreadUtils.postToUiThread(new Runnable() {
                     @Override
@@ -1626,29 +1601,6 @@
 
         mPromptService = new PromptService(this);
 
-        // Trigger the completion of the telemetry timer that wraps activity startup,
-        // then grab the duration to give to FHR.
-        mJavaUiStartupTimer.stop();
-        final long javaDuration = mJavaUiStartupTimer.getElapsed();
-
-        ThreadUtils.getBackgroundHandler().postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                final HealthRecorder rec = mHealthRecorder;
-                if (rec != null) {
-                    rec.recordJavaStartupTime(javaDuration);
-                }
-            }
-        }, 50);
-
-        final int updateServiceDelay = 30 * 1000;
-        ThreadUtils.getBackgroundHandler().postDelayed(new Runnable() {
-            @Override
-            public void run() {
-                UpdateServiceHelper.registerForUpdates(GeckoAppShell.getApplicationContext());
-            }
-        }, updateServiceDelay);
-
         if (mIsRestoringActivity) {
             Tab selectedTab = Tabs.getInstance().getSelectedTab();
             if (selectedTab != null) {
@@ -2072,36 +2024,6 @@
         final long now = System.currentTimeMillis();
         final long realTime = android.os.SystemClock.elapsedRealtime();
 
-        ThreadUtils.postToBackgroundThread(new Runnable() {
-            @Override
-            public void run() {
-                // Now construct the new session on HealthRecorder's behalf. We do this here
-                // so it can benefit from a single near-startup prefs commit.
-                SessionInformation currentSession = new SessionInformation(now, realTime);
-
-                SharedPreferences prefs = GeckoApp.this.getSharedPreferences();
-                SharedPreferences.Editor editor = prefs.edit();
-                editor.putBoolean(GeckoApp.PREFS_WAS_STOPPED, false);
-
-                if (!mLastSessionCrashed) {
-                    // The last session terminated normally,
-                    // so we can reset the count of successive crashes.
-                    editor.putInt(GeckoApp.PREFS_CRASHED_COUNT, 0);
-                }
-
-                currentSession.recordBegin(editor);
-                editor.apply();
-
-                final HealthRecorder rec = mHealthRecorder;
-                if (rec != null) {
-                    rec.setCurrentSession(currentSession);
-                    rec.processDelayed();
-                } else {
-                    Log.w(LOGTAG, "Can't record session: rec is null.");
-                }
-            }
-        });
-
         Restrictions.update(this);
     }
 
@@ -2129,7 +2051,6 @@
             return;
         }
 
-        final HealthRecorder rec = mHealthRecorder;
         final Context context = this;
 
         // In some way it's sad that Android will trigger StrictMode warnings
@@ -2141,9 +2062,6 @@
                 SharedPreferences prefs = GeckoApp.this.getSharedPreferences();
                 SharedPreferences.Editor editor = prefs.edit();
                 editor.putBoolean(GeckoApp.PREFS_WAS_STOPPED, true);
-                if (rec != null) {
-                    rec.recordSessionEnd("P", editor);
-                }
 
                 // onPause might in fact be called even after a crash, but in that case the
                 // crash reporter will record this fact for us and we'll pick it up in onCreate.
@@ -2248,18 +2166,6 @@
             }
         }
 
-        final HealthRecorder rec = mHealthRecorder;
-        mHealthRecorder = null;
-        if (rec != null && rec.isEnabled()) {
-            // Closing a HealthRecorder could incur a write.
-            ThreadUtils.postToBackgroundThread(new Runnable() {
-                @Override
-                public void run() {
-                    rec.close(GeckoApp.this);
-                }
-            });
-        }
-
         super.onDestroy();
 
         Tabs.unregisterOnTabsChangedListener(this);
@@ -2752,15 +2658,6 @@
         final boolean startNewSession = true;
         final boolean shouldRestart = false;
 
-        // If the HealthRecorder is not yet initialized (unlikely), the locale change won't
-        // trigger a session transition and subsequent events will be recorded in an environment
-        // with the wrong locale.
-        final HealthRecorder rec = mHealthRecorder;
-        if (rec != null) {
-            rec.onAppLocaleChanged(locale);
-            rec.onEnvironmentChanged(startNewSession, SESSION_END_LOCALE_CHANGED);
-        }
-
         if (!shouldRestart) {
             ThreadUtils.postToUiThread(new Runnable() {
                 @Override
@@ -2811,16 +2708,6 @@
         });
     }
 
-    protected HealthRecorder createHealthRecorder(final Context context,
-                                                  final String profilePath,
-                                                  final EventDispatcher dispatcher,
-                                                  final String osLocale,
-                                                  final String appLocale,
-                                                  final SessionInformation previousSession) {
-        // GeckoApp does not need to record any health information - return a stub.
-        return new StubbedHealthRecorder();
-    }
-
     protected void recordStartupActionTelemetry(final String passedURL, final String action) {
     }
 
diff -r 0bcea7b72ff9 mobile/android/base/java/org/mozilla/gecko/preferences/GeckoPreferences.java
--- a/mobile/android/base/java/org/mozilla/gecko/preferences/GeckoPreferences.java	Mon Dec 19 21:26:30 2016 -0500
+++ b/mobile/android/base/java/org/mozilla/gecko/preferences/GeckoPreferences.java	Sat Dec 31 00:00:00 2016 -0000
@@ -1184,9 +1184,6 @@
             UpdateServiceHelper.setAutoDownloadPolicy(this, UpdateService.AutoDownloadPolicy.get((String) newValue));
         } else if (PREFS_UPDATER_URL.equals(prefName)) {
             UpdateServiceHelper.setUpdateUrl(this, (String) newValue);
-        } else if (PREFS_HEALTHREPORT_UPLOAD_ENABLED.equals(prefName)) {
-            final Boolean newBooleanValue = (Boolean) newValue;
-            AdjustConstants.getAdjustHelper().setEnabled(newBooleanValue);
         } else if (PREFS_GEO_REPORTING.equals(prefName)) {
             if ((Boolean) newValue) {
                 enableStumbler((CheckBoxPreference) preference);
diff -r 0bcea7b72ff9 mobile/android/base/moz.build
--- a/mobile/android/base/moz.build	Mon Dec 19 21:26:30 2016 -0500
+++ b/mobile/android/base/moz.build	Sat Dec 17 00:00:00 2016 -0000
@@ -434,9 +434,6 @@
     'GeckoUpdateReceiver.java',
     'GlobalHistory.java',
     'GuestSession.java',
-    'health/HealthRecorder.java',
-    'health/SessionInformation.java',
-    'health/StubbedHealthRecorder.java',
     'home/activitystream/ActivityStream.java',
     'home/activitystream/ActivityStreamHomeFragment.java',
     'home/activitystream/ActivityStreamHomeScreen.java',
diff -r 0bcea7b72ff9 mobile/android/search/java/org/mozilla/search/SearchActivity.java
--- a/mobile/android/search/java/org/mozilla/search/SearchActivity.java	Mon Dec 19 21:26:30 2016 -0500
+++ b/mobile/android/search/java/org/mozilla/search/SearchActivity.java	Sat Dec 31 00:00:00 2016 -0000
@@ -254,14 +254,6 @@
     public void onSearch(String query, SuggestionAnimation suggestionAnimation) {
         storeQuery(query);
 
-        try {
-            //BrowserHealthRecorder.recordSearchDelayed("activity", engine.getIdentifier());
-        } catch (Exception e) {
-            // This should never happen: it'll only throw if the
-            // search location is wrong. But let's not tempt fate.
-            Log.w(LOGTAG, "Unable to record search.");
-        }
-
         startSearch(query);
 
         if (suggestionAnimation != null) {
